package Messages;

// 玩家信息
message PlayerInfo {
    required uint64 userID = 1; // 用户ID
    required string nickName = 2; // 用户昵称
    required string pic = 3; // 头像URL
    required int32 sex = 4; // 性别（0：男, 1：女）
    required int32 exp = 5; // 经验值
    required int32 level = 6; // 等级
    required int32 gold = 7; // 游戏币
    required int32 diamond = 8; // 钻石(钱)
    required int32 recharge = 9; // 累计充值金额
    required int32 viplevel = 10; // VIP等级（该功能暂不做，后台服务给个缺省值，方便前端识别）
    required int32 vipgifts = 11; // VIP礼包购买标识（位操作）
    required int32 roomcard1 = 12; // 十局房卡
    required int32 roomcard2 = 13; // 二十局房卡
    required int32 roomcard3 = 14; // 三十局房卡
    required int32 ceateroomid = 15; // 当前创建的房间
    required int32 sign = 16;  // 今日签到标识（位操作）
    required int32 signreward = 17; // 领取签到奖励（位操作）
    required int32 signlasttime = 18; // 签到CD剩余时间(秒)
    required bool chestreward = 19; // 是否领取宝箱奖励
    optional int32 spreadid = 20; // 绑定的邀请码(0表示未绑定)
}

// CHECK_VERSION = 99 # 检查更新
message CheckVersionRequest
{
    required string channel = 1; // 100表示android，101表示ios
}

message CheckVersionResponse
{
    required int32 archivesNo = 1;
    required int32 code = 2;
    required string cost = 3;
    message Down {
        required string code = 1; // 代码url
        required string res = 2; // 资源url
        required int32 restart = 3;
        required string version = 4; // 版本文件清单url
        required string versionId = 5; // 版本号
    }
    required Down down = 4;
    required int32 server_unixtime = 5; // 服务器时间
}

// LOGIN_ACCOUNT = 100 # 登录消息
message LoginAccountRequest
{
    required string channel = 1; // 渠道(1本地,2微信)
    required string username = 2; //用户账号
    required string passwd = 3; //用户密码
    required string openid = 4; // 平台ID
}

message LoginAccountResponse
{
    required int32 result = 1; //响应结果code
    optional uint64 uid = 2; //用户id
    optional string secret = 3; // 密钥
    optional string token = 4; // 令牌
}

// ENTER_PLACE = 101 # 进入游戏场景消息
message EnterPlaceRequest
{
    required uint64 uid = 1; // 用户id
}

message EnterPlaceResponse
{
    required int32 result = 1; //响应结果
    optional PlayerInfo playerInfo = 2; // 玩家信息
}

message Card {
    required uint32 card = 1;  // 牌
}

// CREATE_TABLE = 102 # 创建房间
message CreateTableRequest {
    required int32 max_rounds = 1; // 局数
    required string table_conf = 2; // 房间配置(json)
}

message CreateTableResponse {
    required int32 result = 1; //响应结果
    optional uint32 table_id = 2; // 房间号
    optional string server_ip = 3; // 房间服IP
    optional string server_port = 4; // 房间服端口
}

// TABLE_ENTER = 103 # 进入房间
message TableEnterRequest {
    required uint32 table_id = 1; // 房间号
    required uint64 player = 2; // 玩家UID
}

message TableEnterResponse {
    required int32 result = 1; //响应结果
    optional uint32 table_id = 2; // 房间号
    optional string server_ip = 3; // 房间服IP
    optional string server_port = 4; // 房间服端口
}


// ENTER_TABLE = 200 # 进入房间
message EnterTableRequest
{
    required int32 tableid = 1; // 房间号
    required uint64 player = 2; // 玩家UID
    required string info = 3; // 玩家信息
}

message EnterTableResponse
{
    required int32 result = 1; //响应结果
    optional uint64 owner = 2; // 房主UID
    optional string owner_info = 3; // 房主信息
    optional string kwargs = 4; // 房间配置信息
    optional uint32 rest_cards = 5; // 剩余牌数

    message Player {  // 同房其他玩家信息
        required uint32 seat = 1;  // 座位号
        required uint64 player = 2;  // 玩家UUID
        required string info = 3;  // 玩家详细信息
        required uint32 status = 4;  // 玩家状态
        required uint32 is_online = 5;  // 是否在线
        required uint32 total_score = 6;  // 玩家累计总分
    }
    repeated Player player = 6;
}

// EXIT_TABLE = 201 # 退出房间
message ExitTableRequest
{
    required int32 tableid = 1; // 房间号
}

message ExitTableResponse
{
    required int32 result = 1; //响应结果
    optional uint64 player = 2;  // 玩家UID
}

// DISMISS_TABLE = 202 # 解散房间
message DismissTableRequest
{
    required int32 tableid = 1; // 房间号
}

message DismissTableResponse
{
    required int32 result = 1; //响应结果
    optional int32 flag = 2; // 1-投票解散  0-正常解散
}

// VOTE = 203 # 玩家选择投票
message VoteRequest
{
    required bool flag = 1; // true同意，false拒绝
}

message VoteResponse
{
    required int32 result = 1; //响应结果
    optional bool flag = 2;
    optional uint64 player = 3;
}

// ENTER_TABLE_OTHER = 204 # 广播玩家进入消息
message EnterTableOtherResponse
{
    required int32 result = 1; // 响应结果
    required uint64 player = 2; // 玩家UID
    required string info = 3; // 玩家信息
    required int32 seat = 4; // 座位号
}

// READY = 205 # 准备
message ReadyRequest {}

message ReadyResponse {
    optional uint64 player = 1;  // 玩家UID
}

// DISCARD = 206 # 出牌
message DiscardRequest {
    required Card card = 1;
}

message DiscardResponse {
    required Card card = 1;
    required uint64 player = 2;  // 玩家UID
}

// ACTION = 207 # 动作
message ActionRequest {
    required uint32 action_id = 1;  // 客户端选择的动作ID
    repeated Card bi_card = 2; // 比牌
}

message ActionResponse {
    repeated Card card = 1;
    repeated Card bi_card = 2; // 比牌
    required uint64 player = 3;  // 玩家UID
    required Card active_card = 4;  // 客户端的操作牌
    required uint32 active_type = 5; // 玩家动作类型
    required uint32 trigger_seat = 6; // 触发action玩家座位号
}

// DEAL = 209 # 起手发牌
message DealResponse {
    required uint64 banker = 1;  // 庄家UID
    repeated Card cards_in_hand = 2;  // 发的手牌
}

// DRAW = 210 # 摸牌
message DrawResponse {
    required Card card = 1;
    required uint64 player = 2;  // 玩家UID
}

// 胡牌类型
message WinFlag {
    required string flag = 1;
}

message CardGroup {
    repeated Card cards_group = 1;  // 玩家组坎排
    required uint32 huxi = 2;
}

// SETTLE_FOR_ROUND = 211 # 小结算
message SettleForRoundResponse {
    required uint32 win_type = 1;  // 胡牌类型 点炮 自摸
    repeated CardGroup win_card = 2;  // 玩家胡的牌
    repeated WinFlag win_flag = 3; // 玩家胡牌牌型
    optional int32 final_huxi = 4; // 总胡息
    optional int32 tun = 5; // 胡囤数
    optional int32 final_tun = 6; // 总囤数
    optional int32 fan = 7; // 倍数
    repeated Card cards_rest = 8; // 底牌
    message PlayerData {
        required uint64 player = 1;  // 玩家UUID
        required int32 score = 2;  // 玩家当局分数
        required int32 total = 3;  // 玩家累计总分
        required int32 win_type = 4;  // 玩家胡牌类型
    }
    repeated PlayerData player_data = 9;
}

// SETTLE_FOR_ROOM = 212 # 大结算
message SettleForRoomResponse {
    required uint32 flag = 1;  // 判断是正常完成所有局数还是解散房间 0 投票解散结算 1 正常解散
    message PlayerData {
        required uint64 player = 1;  // 玩家UUID
        required uint32 seat = 2;  // 玩家座位号
        required int32 total_score = 3;  // 玩家总分
        required int32 top_score = 4;  // 玩家最高分
        required uint32 win_total_cnt = 5;  // 玩家胡牌总次数
        required uint32 win_draw_cnt = 6;  // 玩家自摸胡次数
        required uint32 win_discard_cnt = 7;  // 玩家点炮胡次数
        required uint32 pao_cnt = 8;  // 玩家放炮次数
        required uint32 is_owner = 9;  // 是否为房主
    }
    repeated PlayerData player_data = 2;
}

// ONLINE_STATUS = 222 # 在线状态广播
message OnlineStatusResponse {
    required uint64 player = 1;  // 玩家UID
    required bool status = 2;  // 0 离线 1 上线
}

// RECONNECT = 223 # 玩家断线重连
message ReconnectResponse {
    required uint32 table_id = 1;  // 6位房间号
    required string kwargs = 2;  // json 创建房间参数，由具体游戏各自解析字段
    required uint64 owner = 3;  // 房主UID

    required uint32 room_status = 4;  // 房间状态
    required uint32 current_round = 5;  // 当前局数
    required int32 dealer = 6;  // 庄家seat
    required int32 active_seat = 7;  // 当前活动玩家座位号
    required int32 discard_seat = 8;  // 当前出牌玩家座位号
    required int32 draw_seat = 9; // 当前摸牌玩家座位号
    required uint32 rest_cards = 10; // 剩余牌数

    required uint32 show_card = 11;  // 桌面显示的牌，0：不显示

    message Player {  // 同房其他玩家信息
        required uint32 seat = 1;  // 座位号
        required uint64 player = 2;  // 玩家UID
        required string info = 3;  // 玩家详细信息
        required uint32 status = 4;  // 玩家状态
        required uint32 is_online = 5;  // 是否在线
        required int32 total_score = 6;  // 玩家累计总分

        repeated Card cards_in_hand = 7;  // 手牌
        repeated Card cards_discard = 8;  // 打出去的牌
        repeated Card cards_pong = 9;  // 碰牌
        repeated Card cards_chow = 10;  // 吃牌
	repeated Card cards_wei = 11; // 偎牌
	repeated Card cards_ti = 12; // 提牌
	repeated Card cards_pao = 13; // 跑牌
    }
    repeated Player player = 12;
    optional string owner_info = 13; // 房主信息
}

// PROMPT = 224 # 操作提示
message PromptResponse {
    required Card op_card = 1;  // 操作牌
    message Prompt {
        required uint32 action_id = 1;  // 动作ID
        required uint32 prompt = 2;  // 提示类型
        repeated Card ref_card = 3;  // 关联牌
		repeated Card bi_card = 4; // 比牌
    }
    repeated Prompt prompt = 2;
}

// SPONSOR_VOTE  = 225 # 发起投票解散
message SponsorVoteResponse {
    required uint32 table_id = 1;  // 6位房间号
    required uint64 sponsor = 2;  // 发起投票玩家UUID
    required uint32 expire_seconds = 3; // 投票超时时间
}

// CUT_PROMPT  = 226 # 切牌提示
message CutPromptResponse {
    required uint64 player = 1;  // 玩家UID
}

// CUT_CONFIRM = 227 # 确认切牌
message CutConfirmRequest {
    required bool flag = 1; // Ture进入切牌，False取消切牌
}

message CutConfirmResponse {
    required uint64 player = 1;  // 玩家UID
    required uint32 position = 2; // 初始切牌位置
    required uint32 expire_seconds = 3; // 切牌超时时间
}

// SYNC_CUT = 228 # 同步切牌位置
message SyncCutRequest {
    required uint32 position = 1; // 切牌位置
}

message SyncCutResponse {
    required uint32 position = 1; // 切牌位置
}

// LIANG = 229 # 亮张
message LiangResponse {
    required Card card = 1;
    required uint64 player = 2;  // 玩家UID
}

// SYNC_HUXI = 230 # 实时同步胡息
message SyncHuxiResponse {
    message Score {
        required uint64 player = 1;  // 玩家UID
        required uint32 huxi = 2;  // 玩家桌面胡息
    }
    repeated Score score = 1;
}

// FINISH_CUT = 231 # 完成切牌
message FinishCutRequest {}
message FinishCutResponse {
    required uint32 position = 1; // 切牌位置
}

// CHAT = 232 # 语音、常用语、表情
message ChatRequest
{
    optional string voiceUrl = 1; // 语音URL(没有填空)
    optional int32 voiceTime = 2; // 语音时长
    optional int32 customId = 3; // 预制语音ID(没有填0)
    optional int32 faceId = 4; // 表情ID
}

message ChatResponse
{
    optional string voiceUrl = 1; // 语音URL(没有填空)
    optional int32 voiceTime = 2; // 语音时长
    optional int32 customId = 3; // 预制语音ID(没有填0)
    optional int32 faceId = 4; // 表情ID
    required uint64 player = 5; // 玩家UID
}

// LIUJU = 233 # 流局
message LiuJuResponse {}

//-----------------------------------定义服务器间协议---------------
message SSCreateTableRequest {
    required uint32 table_id = 1; // 房间号
    required uint64 owner = 2; // 房主UID
    required string kwargs = 3;  // json 创建房间参数，由具体游戏各自解析字段
    required uint64 table_uuid = 4; // 房间唯一标识
}

message SSCreateTableResponse {
    required uint32 code = 1; // 返回结果
}

message SSEnterTableResponse {
    required uint32 code = 1; // 返回结果
    optional uint32 table_id = 2; // 房间号
    optional uint64 player = 3; // 玩家UID
}

message SSExitTableResponse {
    required uint32 code = 1; // 返回结果
    optional uint32 table_id = 2; // 房间号
    optional uint64 player = 3; // 玩家UID
}

message SSDismissTableResponse {
    required uint32 code = 1; // 返回结果
    optional uint32 table_id = 2; // 房间号
    optional uint64 owner = 3; // 房主UID
}

message SSRefundResponse {
    required uint32 code = 1; // 返回结果
    optional uint32 table_id = 2; // 房间号
    optional uint64 owner = 3; // 房主UID
    optional uint64 table_uuid = 4; // 房间唯一标识
}

//-----------------------------------定义服务器间协议END---------------
